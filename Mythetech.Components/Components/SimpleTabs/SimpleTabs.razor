@using MudBlazor
@inherits MudComponentBase

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<MudStack Class="mud-width-full mud-height-full">
    <MudStack Row="true" Justify="Justify.Center" Class="@($"pa-1 align-text-center rounded {GetBorderClass(Color)} mx-4 {Class}")" Spacing="0" AlignItems="AlignItems.Center" Style="@Style">
        @foreach (var tab in _tabs)
        {
         
            <MudLink Class="@($"flex-grow-1 rounded{(tab.IsActive ? $" {GetBackgroundClass(Color)}" : "")}")"
                     Color="@(tab.IsActive ? Color : Color.Default)"
                     OnClick="@(() => SelectTab(tab))">
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (!string.IsNullOrWhiteSpace(tab.Icon))
                {
                    <MudIcon Icon="@tab.Icon"
                             Color="@(tab.IsActive ? Color : Color.Default)"/>
                }
                @tab.Name
                </MudStack>
            </MudLink>
        }
    </MudStack>

    <div class="mud-height-full mud-width-full px-4">
        @foreach (var tab in _tabs.Where(t => t.IsActive))
        {
            @tab.ChildContent
        }
    </div>
</MudStack>

@code {
    /// <summary>
    /// The content to render in the cascading tab content area
    /// </summary>
    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Color to display the tabs in
    /// </summary>
    [Parameter] public Color Color { get; set; } = Color.Primary;
    
    private List<Tab> _tabs = new();

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _tabs.Clear();
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _tabs.Count > 0 && !_tabs.Any(t => t.IsActive))
        {
            _tabs[0].IsActive = true;
            StateHasChanged();
        }
    }

    internal void AddTab(Tab tab)
    {
        if (!_tabs.Contains(tab))
        {
            _tabs.Add(tab);
            StateHasChanged();
        }
    }

    internal void RemoveTab(Tab tab)
    {
        if (_tabs.Contains(tab))
        {
            _tabs.Remove(tab);

            if (tab.IsActive && _tabs.Count > 0)
            {
                _tabs[0].IsActive = true;
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// Selects a tab to be active by its tab name
    /// </summary>
    /// <param name="tabName"></param>
    public void SelectTab(string tabName)
    {
        var tab = _tabs.FirstOrDefault(x => x.Name.Equals(tabName));
        
        if (tab == null) return;
        
        SelectTab(tab);
    }

    private void SelectTab(Tab tab)
    {
        foreach (var t in _tabs)
        {
            t.IsActive = t == tab;
        }

        StateHasChanged();
    }
    
    private string GetBorderClass(Color color)
    {
        return color switch
        {
            Color.Primary => "border-primary-1",
            Color.Secondary => "border-secondary-1",
            Color.Tertiary => "border-tertiary-1",
            Color.Info => "border-info-1",
            Color.Success => "border-success-1",
            Color.Warning => "border-warning-1",
            Color.Error => "border-error-1",
            _ => "border-primary-1"
        };
    }
    
    private string GetBackgroundClass(Color color)
    {
        return color switch
        {
            Color.Primary => "bg-primary-50",
            Color.Secondary => "bg-secondary-50",
            Color.Tertiary => "bg-tertiary-50",
            Color.Info => "bg-info-50",
            Color.Success => "bg-success-50",
            Color.Warning => "bg-warning-50",
            Color.Error => "bg-error-50",
            _ => "bg-primary-50"
        };
    }
}