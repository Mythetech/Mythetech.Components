@using Mythetech.Components.Infrastructure.MessageBus
@using Mythetech.Components.Components.Buttons
@attribute [Stories("Infrastructure/MessageBus")]
@inherits ComponentConsumer<MessageBus_stories.ExampleDialogMessage>

<Stories TComponent="IMessageBus">

    <Story TComponent="IMessageBus" Layout="typeof(DefaultMudLayout)" Name="Example">
        @*
        <Arguments>
            <Arg For="_ => _.Color" Value="Color.Primary"/>
            <Arg For="_ => _.Variant" Value="Variant.Filled"/>
            <Arg For="_ => _.Text" Value="@("Button")"/>
            <Arg For="_ => _.Class" Value="@("")"/>
        </Arguments>
*@
        <Template>
            <MudStack Class="mud-height-full" AlignItems="AlignItems.Center" Justify="Justify.Center" Style="min-height:50dvh;">
                <Button @attributes="context.Args" Text="Click Me" OnClick="@OpenDialog">
                </Button>
                
                <MudMarkdown Value="@_recordMarkdown" CodeBlockTheme="CodeBlockTheme.Dark" />
            </MudStack>
        </Template>
    </Story>
</Stories>

@code {
    [Inject]
    protected IMessageBus Bus { get; set; }
    
    [Inject]
    protected IDialogService DialogService { get; set; }

    public async Task OpenDialog()
    {
        await Bus.PublishAsync(new ExampleDialogMessage());
    }

    public record ExampleDialogMessage();

    protected override async Task Consume(ExampleDialogMessage message, CancellationToken cancellationToken)
    {
        await DialogService.ShowMessageBox(new()
        {
            Title = "Example",
            Message = "Triggered from a message"
        });
    }

    private string _recordMarkdown = @"
When the button is clicked, the message box dialog is not directly opened. We can pass any class or record to the message bus and subscribers will get notified.

Here's the method called when the button is clicked.

```csharp
    public async Task OpenDialog()
    {
        await Bus.PublishAsync(new ExampleDialogMessage());
    }
```

The definition for that message is simply an empty record, but you can add whatever properties you like to them and consumers will get that strongly typed message in its handler.

```csharp
   public record ExampleDialogMessage();
```

You can either implement the interface `IConsumer`, or use the component base class `ComponentConsumer` which handles subscription and disposing automatically.

```csharp
    protected override async Task Consume(ExampleDialogMessage message, CancellationToken cancellationToken)
    {
        await DialogService.ShowMessageBox(new()
        {
            Title = ""Example"",
            Message = ""Triggered from a message""
        });
    }
```
";

}